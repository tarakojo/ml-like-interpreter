


let rec ones = 1 :: ones ;;

let rec map f lis =
    match lis with 
    | [] -> []
    | h :: t -> (f h) :: map f t 
    end ;;

let succ x = x + 1;;
let rec nats = 0 :: (map succ nats);;


let tl lis = match lis with h :: tl -> tl end ;;


let rec addall l1 l2 = 
    match (l1, l2) with 
    | (h1 :: t1, h2 :: t2) -> (h1 + h2) :: addall t1 t2 end;;

let rec fib = 1 :: 1 :: addall fib (tl fib);;


let rec slide_all lis = 
    match lis with 
    | [] -> []
    | (x, 0) :: tl -> (0, x + 1) :: slide_all tl 
    | (x, y) :: tl -> (x + 1, y - 1) :: slide_all tl 
    end 
;;

let rec natpairs = (0, 0) :: slide_all natpairs;;


