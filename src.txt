1 - 1 - 1 
==> -1;;

3 * 2 / 3 
==> 2;;

1 + 2 * 2 
==> 5;;

1 + 1 < 1 + 1 
==> false;;

if true then 1 else 2 + 1 
==> 1;;

if if true then false else false then
    if true then true else true
  else
    if true then false else false 
==> false;;

let x = true in x
==> true ;;

let x = let x = true in false in x
==> false ;;

let x = true in
let x = false in
x
==> false;;

let x = true;;
let x = false;;
x
==> false;;

let x = true;;
let x = false in x;;
x
==> true;;

let x = fun x -> x in x 1
==> 1;;

let f = fun x -> x * 2 in f 2 + 2
==> 6;;

let f = fun x -> fun x -> x in f 1 2
==> 2;;

let f = fun x -> fun y -> x in f 1 2
==> 1;;

let rec f x = if x < 1 then 1 else x * f (x - 1) in f 5
==> 120;;

let rec fix f = fun x -> f (fix f) x in
let fact = fix (fun f -> fun x -> if x < 1 then 1 else x * f (x - 1)) in
fact 5 
==> 120;;


1 :: 2 :: 3 :: []
==> [1;2;3];;

(1, true)
==> (1,true);;

match (1, 2) with
  (x, y) -> x
end
==> 1;; 
match (1, (2, 3)) with
  (x, (y, z)) -> z
end
==> 3;;

match 1 :: 2 :: 3 :: [] with
  h :: t -> h
| [] -> 0
end
==> 1;;

match 1 :: 2 :: 3 :: [] with
  x :: y :: t -> t
| z -> [0]
end
==> [3];;

let rec f x = g x
and     g x = h x
and     h x = x * 2
in
f 3
==> 6;;

let rec f x = if 10 < x then x else h x
and     h x = f (x * 2)
in
f 3
==> 12;;

let rec even x = if x = 0 then true else odd (x - 1)
and     odd x = if x = 0 then false else even (x - 1)
in
even 3
==> false;;


4 % 2 ==> 0;;
5 % 2 ==> 1 ;;

true && true ==> true;;
true || false ==> true;;
true || false ==> true;;
false || false ==> false;;

1 <= 2 ==> true;;
1 <= 1 ==> true;;
1 <= 0 ==> false;;
1 > 2 ==> false;;
1 > 1 ==> false;;
1 > 0 ==> true;;
1 >= 2 ==> false;;
1 >= 1 ==> true;;
1 >= 0 ==> true;;

let f x y = x + y;;
f 1 2 ==> 3;;



